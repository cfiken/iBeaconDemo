[
 {
  "file": "/Users/kentaro/keel/workspace/iBeaconDemo/iBeaconDemo/ViewController.swift",
  "offset": 1755,
  "remove": 4691,
  "text": "(\"観測開始\")\n            self.status.text = \"Starting Monitor\"\n            self.manager.startRangingBeaconsInRegion(self.region)\n        case .NotDetermined:\n            print(\"許可承認\")\n            self.status.text = \"Starting Monitor\"\n            //デバイスに許可を促す            \n            if(UIDevice.currentDevice().systemVersion.substringToIndex(1).toInt() >= 8){\n                //iOS8以降は許可をリクエストする関数をCallする\n                self.manager.requestAlwaysAuthorization()\n            }else{\n                self.manager.startRangingBeaconsInRegion(self.region)\n            }\n        case .Restricted, .Denied:\n            //デバイスから拒否状態\n            print(\"Restricted\")\n            self.status.text = \"Restricted Monitor\"\n        }  \n    }\n    \n    \n    //以下 CCLocationManagerデリゲートの実装---------------------------------------------->\n    \n    /*    \n    - (void)locationManager:(CLLocationManager *)manager didStartMonitoringForRegion:(CLRegion *)region\n    Parameters\n    manager : The location manager object reporting the event.\n    region  : The region that is being monitored.\n    */\n    func locationManager(manager: CLLocationManager, didStartMonitoringForRegion region: CLRegion) {\n        manager.requestStateForRegion(region)\n        self.status.text = \"Scanning...\"\n    }\n    \n    /*\n    - (void)locationManager:(CLLocationManager *)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion *)region\n    Parameters\n    manager :The location manager object reporting the event.\n    state   :The state of the specified region. For a list of possible values, see the CLRegionState type.\n    region  :The region whose state was determined.\n    */\n    func locationManager(manager: CLLocationManager, didDetermineState state: CLRegionState, forRegion inRegion: CLRegion) {\n        if (state == .Inside) {\n            //領域内にはいったときに距離測定を開始\n            manager.startRangingBeaconsInRegion(region)\n        }\n    }\n    \n    /*\n    リージョン監視失敗（bluetoosの設定を切り替えたりフライトモードを入切すると失敗するので１秒ほどのdelayを入れて、再トライするなど処理を入れること）\n    - (void)locationManager:(CLLocationManager *)manager monitoringDidFailForRegion:(CLRegion *)region withError:(NSError *)error\n    Parameters\n    manager : The location manager object reporting the event.\n    region  : The region for which the error occurred.\n    error   : An error object containing the error code that indicates why region monitoring failed.\n    */\n    func locationManager(manager: CLLocationManager, monitoringDidFailForRegion region: CLRegion?, withError error: NSError) {\n        print(\"monitoringDidFailForRegion \\(error)\")\n        self.status.text = \"Error :(\"\n    }\n    \n    /*\n    - (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error\n    Parameters\n    manager : The location manager object that was unable to retrieve the location.\n    error   : The error object containing the reason the location or heading could not be retrieved.\n    */\n    //通信失敗\n    func locationManager(manager: CLLocationManager, didFailWithError error: NSError) {\n        print(\"didFailWithError \\(error)\")\n    }    \n    \n    func locationManager(manager: CLLocationManager, didEnterRegion region: CLRegion) {\n        manager.startRangingBeaconsInRegion(region as! CLBeaconRegion)\n        self.status.text = \"Possible Match\"\n    }\n    \n    func locationManager(manager: CLLocationManager, didExitRegion region: CLRegion) {\n        manager.stopRangingBeaconsInRegion(region as! CLBeaconRegion)\n        reset()\n    }\n    \n    /*\n    beaconsを受信するデリゲートメソッド。複数あった場合はbeaconsに入る\n    - (void)locationManager:(CLLocationManager *)manager didRangeBeacons:(NSArray *)beacons inRegion:(CLBeaconRegion *)region\n    Parameters\n    manager : The location manager object reporting the event.\n    beacons : An array of CLBeacon objects representing the beacons currently in range. You can use the information in these objects to determine the range of each beacon and its identifying information.\n    region  : The region object containing the parameters that were used to locate the beacons\n    */\n    func locationManager(manager: CLLocationManager!, didRangeBeacons beacons: NSArray!, inRegion region: CLBeaconRegion!) {\n        print(beacons)\n        \n        if(beacons.count == 0) { return }\n        //複数あった場合は一番先頭のものを処理する\n        var beacon = beacons[0] as!",
 }
]
